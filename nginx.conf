worker_processes auto;

error_log  logs/error.log  info;

pid        logs/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;

    #Creating a custom variable $client_ip to get the real client IP, configured as follows: (optional)
    map $http_x_forwarded_for $client_ip {
        "" $remote_addr;
        "~*(?P<firstAddr>([0-9a-f]{0,4}:){1,7}[0-9a-f]{1,4}|([0-9]{1,3}\.){3}[0-9]{1,3})$" $firstAddr;
    }

    #Enable access log, with adjusted configuration as follows: (optional)
    log_format main '$client_ip - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log logs/access.log main; #Path for access log file. (optional)

    sendfile on;

    keepalive_timeout 65;

    server {
        listen 80;
        return 301 https://$host$request_uri; #Automatic HTTP to HTTPS redirect to make the website appear more authentic.
    }

    server {
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server; #Can delete this line if no IPv6.
        ssl_protocols TLSv1.2;
        ssl_reject_handshake on; #Supported only in versions not less than v1.19.4
    } #Restrict domain connections (including prohibiting access to the website by IP)

    server {
        listen 443 ssl;
        server_name my.domain.com; #Change to your own domain

        ssl_certificate /path/to/your/ssl.crt; #Replace with your own certificate, absolute path.
        ssl_certificate_key /path/to/your/ssl.key; #Replace with your own key, absolute path.

        ssl_protocols TLSv1.2 TLSv1.3; #If using OpenSSL library, TLSv1.3 requires OpenSSL library version not less than 1.1.1 to support.
        ssl_prefer_server_ciphers on; #Prefer server-side cipher suites. (Effective for the following TLSv1.2 protocol cipher suites)
        ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305; #If certificate is RSA, change all ECDSA to RSA.
        ssl_ecdh_curve secp521r1:secp384r1:secp256r1:x25519; #If using OpenSSL library, this configuration parameter requires OpenSSL library version not less than 3.0.0 to support.

        location / {
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always; #Enable HSTS
            root /var/www/html; #Modify to your own WEB file path
            index index.html index.htm;
        }
        #X-UI Admin Panel
        location /x-ui-panel-path/ {
            proxy_pass http://127.0.0.1:50792;
            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            break;
        }

        #Subscription Path (simple/encode)
        location ~ ^/files/(?<fwdpath>.*)$ {
            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://127.0.0.1:2096/files/$fwdpath$is_args$args;
    
            header_filter_by_lua_block {
                ngx.header.content_length = nil
            }
            
            body_filter_by_lua_block {
                local chunk = ngx.arg[1]
                local eof = ngx.arg[2]
                
                if eof then
                    local data = ngx.ctx.buffered or chunk
                    
                    -- First base64 decode
                    local decoded_data = ngx.decode_base64(data)
                    if not decoded_data then
                        ngx.log(ngx.ERR, "Failed on first base64 decode")
                        ngx.arg[1] = chunk
                        return
                    end
                    
                    -- Check if there are multiple vmess:// links (separated by newlines)
                    local results = {}
                    local prefix = "vmess://"
                    
                    -- Split by newline if multiple links exist
                    local lines = {}
                    for line in decoded_data:gmatch("[^\r\n]+") do
                        table.insert(lines, line)
                    end
                    
                    -- If no newlines found, treat as single entry
                    if #lines == 0 then
                        lines = {decoded_data}
                    end
                    
                    -- Process each line
                    for _, vmess_data in ipairs(lines) do
                        -- Check if this line has vmess:// prefix
                        local prefix_pos = string.find(vmess_data, prefix, 1, true)
                        if prefix_pos then
                            local vmess_base64 = string.sub(vmess_data, prefix_pos + #prefix)
                            
                            -- Decode the base64 part
                            local json_str = ngx.decode_base64(vmess_base64)
                            if not json_str then
                                ngx.log(ngx.ERR, "Failed on second base64 decode")
                                table.insert(results, vmess_data) -- Keep original if can't decode
                                goto continue
                            end
                            
                            -- Parse JSON
                            local success, json_obj = pcall(function() 
                                local cjson = require("cjson")
                                return cjson.decode(json_str)
                            end)
                            
                            if not success or not json_obj then
                                ngx.log(ngx.ERR, "Failed to parse JSON: ", json_obj)
                                table.insert(results, vmess_data) -- Keep original if can't parse
                                goto continue
                            end
                            
                            -- Modify the JSON object
                            json_obj.allowInsecure = false
                            json_obj.alpn = "h3,h2,http/1.1"
                            json_obj.fp = "chrome"
                            json_obj.tls = "tls"

                            -- Modify the path to add ?ed=2560
                            if json_obj.path then
                                -- Check if the path already has query parameters
                                if string.find(json_obj.path, "?") then
                                    json_obj.path = json_obj.path .. "&ed=2560"
                                else
                                    json_obj.path = json_obj.path .. "?ed=2560"
                                end
                            end
                            
                            -- Serialize back to JSON
                            local success, modified_json = pcall(function()
                                local cjson = require("cjson")
                                return cjson.encode(json_obj)
                            end)
                            
                            if not success or not modified_json then
                                ngx.log(ngx.ERR, "Failed to encode modified JSON")
                                table.insert(results, vmess_data) -- Keep original if can't encode
                                goto continue
                            end
                            
                            -- Encode the modified JSON
                            local encoded_json = ngx.encode_base64(modified_json)
                            if not encoded_json then
                                ngx.log(ngx.ERR, "Failed to encode modified JSON to base64")
                                table.insert(results, vmess_data) -- Keep original if can't encode
                                goto continue
                            end
                            
                            -- Add vmess:// prefix
                            local with_prefix = prefix .. encoded_json
                            table.insert(results, with_prefix)
                        else
                            -- If no vmess:// prefix, keep the line as is
                            table.insert(results, vmess_data)
                        end
                        
                        ::continue::
                    end
                    
                    -- Join the results with newlines
                    local combined_result = table.concat(results, "\n")
                    
                    -- Final base64 encode
                    local final_encoded = ngx.encode_base64(combined_result)
                    if not final_encoded then
                        ngx.log(ngx.ERR, "Failed on final base64 encode")
                        ngx.arg[1] = combined_result
                        return
                    end
                    
                    -- Return the final encoded result
                    ngx.arg[1] = final_encoded
                else
                    ngx.ctx.buffered = (ngx.ctx.buffered or "") .. chunk
                    ngx.arg[1] = nil
                end
            }
            # break;
        }
        
        #Subscription Path (json/fragment)
        location ~ ^/raw/(?<fwdpath>.*)$ {
            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass http://127.0.0.1:2096/raw/$fwdpath$is_args$args;
            break;
        }

        #VMess+HTTPUpgrade
        location = /vmess-http-upgrade-path { #Corresponds to the path in VMess+HTTPUpgrade application
            if ($http_upgrade != "websocket") {
                return 404;
            }
            proxy_http_version 1.1;
            proxy_pass http://127.0.0.1:28485; #Forward to local VMess+HTTPUpgrade listening port
            proxy_redirect off;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

    }
}